{"ast":null,"code":"var _jsxFileName = \"/Users/shaylavi/Desktop/junior's place/site/src/pages/React/Hooks/Hooks.jsx\";\nimport React from 'react';\nimport './Hooks.css';\nimport Navbar from '../../../components/Navbar/Navbar';\nimport e1 from './e1.png';\nimport e2 from './e2.png';\nimport e3 from './e3.png';\nimport e4 from './e4.png';\nimport e5 from './e5.png';\nimport e6 from './e6.png';\nimport e7 from './e7.png';\nimport e8 from './e8.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Hooks() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"body\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"sidenav sticky-to\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/react/part1\",\n          children: \"Basics part 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/react/part2\",\n          children: \"Basics part 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/react/hooks\",\n          children: \"Hooks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/react/mysql\",\n          children: \"Redux\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/react/graphql\",\n          children: \"GraphQL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/react/quizz\",\n          children: \"Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container px-9 px-lg-30\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"white-text-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" Hooks were added to React in version 16.8. Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Hooks allow us to \\\"hook\\\" into React features such as state and lifecycle methods.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You must import Hooks from react. Here we are using the useState Hook to keep track of the application state. State generally refers to application data or properties that need to be tracked.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Hooks rules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There are 3 rules for hooks:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Hooks can only be called inside React function components.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Hooks can only be called at the top level of a component.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Hooks cannot be conditional\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"React useState Hook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The React useState Hook allows us to track state in a function component. State generally refers to data or properties that need to be tracking in an application.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"To use the useState Hook, we first need to import it into our component. Notice that we are destructuring useState from react as it is a named export.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"We initialize our state by calling useState in our function component.useState accepts an initial state and returns two values: The current state and the function that updates the state. To update our state, we use our state updater function. The useState Hook can be used to keep track of strings, numbers, booleans, arrays, objects, and any combination of these! We could create multiple state Hooks to track individual values.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"When state is updated, the entire state gets overwritten. What if we only want to update the color of our car? If we only called setCar({color: \\\"blue\\\"}), this would remove the brand, model, and year from our state. We can use the JavaScript spread operator to help us.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"React useEffect Hooks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The useEffect Hook allows you to perform side effects in your components. Some examples of side effects are: fetching data, directly updating the DOM, and timers. useEffect accepts two arguments. The second argument is optional. useEffect(<function>, <dependency>) Let's use a timer as an example.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"But wait!! It keeps counting even though it should only count once! useEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect. This is not what we want. There are several ways to control when side effects run. We should always include the second parameter which accepts an array. We can optionally pass dependencies to useEffect in this array.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"React useContext Hook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"React Context is a way to manage state globally. It can be used together with the useState Hook to share state between deeply nested components more easily than with useState alone.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"The Problem\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"State should be held by the highest parent component in the stack that requires access to the state. To illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state. To do this without Context, we will need to pass the state as \\\"props\\\" through each nested component. This is called \\\"prop drilling\\\".\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"The Solution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The solution is to create context.To create context, you must Import createContext and initialize it.Next we'll use the Context Provider to wrap the tree of components that need the state Context.Wrap child components in the Context Provider and supply the state value. In order to use the Context in a child component, we need to access it using the useContext Hook. First, include the useContext in the import statement:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"React useRef Hook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The useRef Hook allows you to persist values between renders. It can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render. To avoid this, we can use the useRef Hook.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"images3\",\n            src: e8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"In general, we want to let React handle all DOM manipulation. But there are some instances where useRef can be used without causing issues. In React, we can add a ref attribute to an element to access it directly in the DOM.The useRef Hook can also be used to keep track of previous state values. This is because we are able to persist useRef values between renders.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"React useReducer Hook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        class: \"py-3 bg-dark fixed-bottom\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"container px-4 px-lg-5\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"m-0 text-center text-white\",\n            children: \"Copyright \\xA9 shay lavi 2023\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n        src: \"js/scripts.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }, this);\n}\n_c = Hooks;\nexport default Hooks;\nvar _c;\n$RefreshReg$(_c, \"Hooks\");","map":{"version":3,"names":["React","Navbar","e1","e2","e3","e4","e5","e6","e7","e8","jsxDEV","_jsxDEV","Hooks","children","fileName","_jsxFileName","lineNumber","columnNumber","class","href","className","src","_c","$RefreshReg$"],"sources":["/Users/shaylavi/Desktop/junior's place/site/src/pages/React/Hooks/Hooks.jsx"],"sourcesContent":["import React from 'react'\nimport './Hooks.css'\nimport Navbar from '../../../components/Navbar/Navbar'\nimport e1 from './e1.png'\nimport e2 from './e2.png'\nimport e3 from './e3.png'\nimport e4 from './e4.png'\nimport e5 from './e5.png'\nimport e6 from './e6.png'\nimport e7 from './e7.png'\nimport e8 from './e8.png'\nfunction Hooks() {\n  return (\n      <div>\n      <body>\n        <Navbar />\n        <div class=\"sidenav sticky-to\">\n        <a href=\"/react/part1\">Basics part 1</a>\n        <a href=\"/react/part2\">Basics part 2</a>\n        <a href=\"/react/hooks\">Hooks</a>\n        <a href=\"/react/mysql\">Redux</a>\n        <a href=\"/react/graphql\">GraphQL</a>\n        <a href=\"/react/quizz\">Quiz</a>\n      </div>\n      <div class=\"container px-9 px-lg-30\">\n            <div class=\"white-text-block\">\n              <p> Hooks were added to React in version 16.8. Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.</p>\n              <p>Hooks allow us to \"hook\" into React features such as state and lifecycle methods.</p>\n              <img className = 'images3' src= {e1}/>\n              <p>You must import Hooks from react. Here we are using the useState Hook to keep track of the application state. State generally refers to application data or properties that need to be tracked.</p>\n              <h2>Hooks rules</h2>\n              <p>There are 3 rules for hooks:</p>\n              <ul>\n                <li>Hooks can only be called inside React function components.</li>\n                <li>Hooks can only be called at the top level of a component.</li>\n                <li>Hooks cannot be conditional</li>\n              </ul>\n              <h2>React useState Hook</h2>\n              <p>The React useState Hook allows us to track state in a function component. State generally refers to data or properties that need to be tracking in an application.</p>\n              <p>To use the useState Hook, we first need to import it into our component. Notice that we are destructuring useState from react as it is a named export.</p>\n              <p>We initialize our state by calling useState in our function component.useState accepts an initial state and returns two values: The current state and the function that updates the state. To update our state, we use our state updater function. The useState Hook can be used to keep track of strings, numbers, booleans, arrays, objects, and any combination of these! We could create multiple state Hooks to track individual values.</p>\n              <img className = 'images3' src= {e2}/>\n              <p>When state is updated, the entire state gets overwritten. What if we only want to update the color of our car? If we only called setCar(&#123;color: \"blue\"&#125;), this would remove the brand, model, and year from our state. We can use the JavaScript spread operator to help us.</p>\n              <img className = 'images3' src= {e3}/>\n              <h2>React useEffect Hooks</h2>\n              <p>The useEffect Hook allows you to perform side effects in your components. Some examples of side effects are: fetching data, directly updating the DOM, and timers. useEffect accepts two arguments. The second argument is optional. useEffect(&lt;function&gt;, &lt;dependency&gt;) Let's use a timer as an example.</p>\n              <img className = 'images3' src= {e4}/>\n              <p>But wait!! It keeps counting even though it should only count once! useEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect. This is not what we want. There are several ways to control when side effects run. We should always include the second parameter which accepts an array. We can optionally pass dependencies to useEffect in this array.</p>\n              <img className = 'images3' src= {e5}/>\n              <h2>React useContext Hook</h2>\n              <p>React Context is a way to manage state globally. It can be used together with the useState Hook to share state between deeply nested components more easily than with useState alone.</p>\n              <p><b>The Problem</b></p>\n              <p>State should be held by the highest parent component in the stack that requires access to the state. To illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state. To do this without Context, we will need to pass the state as \"props\" through each nested component. This is called \"prop drilling\".</p>\n              <img className = 'images3' src= {e6}/>\n              <p><b>The Solution</b></p>\n              <p>The solution is to create context.To create context, you must Import createContext and initialize it.Next we'll use the Context Provider to wrap the tree of components that need the state Context.Wrap child components in the Context Provider and supply the state value. In order to use the Context in a child component, we need to access it using the useContext Hook. First, include the useContext in the import statement:</p>\n              <img className = 'images3' src= {e7}/>\n              <h2>React useRef Hook</h2>\n              <p>The useRef Hook allows you to persist values between renders. It can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly.</p>\n              <p>If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render. To avoid this, we can use the useRef Hook.</p>\n              <img className = 'images3' src= {e8}/>\n              <p>In general, we want to let React handle all DOM manipulation. But there are some instances where useRef can be used without causing issues. In React, we can add a ref attribute to an element to access it directly in the DOM.The useRef Hook can also be used to keep track of previous state values. This is because we are able to persist useRef values between renders.</p>\n              <h2>React useReducer Hook</h2>\n            </div>\n        </div>\n      <footer class=\"py-3 bg-dark fixed-bottom\">\n          <div class=\"container px-4 px-lg-5\"><p class=\"m-0 text-center text-white\">Copyright &copy; shay lavi 2023</p></div>\n      </footer>\n      <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\"></script>\n      <script src=\"js/scripts.js\"></script>\n  </body>\n  </div>\n  )\n}\n\nexport default Hooks\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}